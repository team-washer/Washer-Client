"use client"

import { useState, useEffect, useCallback } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import {
  User,
  Clock,
  MapPin,
  Mail,
  Calendar,
  AlertCircle,
  CheckCircle,
  XCircle,
  Play,
  RefreshCw,
  Loader2,
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import {
  userApi,
  reservationApi,
  machineApi,
  getMachineJobStateInfo,
  parseTimeStringToSeconds,
  type UserInfo,
} from "@/lib/api-client"
import { formatTime } from "@/lib/utils"

export default function MyPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(true)
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null)
  const [remainingTime, setRemainingTime] = useState<number>(0)
  const [refreshCooldown, setRefreshCooldown] = useState(0)
  const [actionLoading, setActionLoading] = useState(false)
  const [machineCheckInterval, setMachineCheckInterval] = useState<NodeJS.Timeout | null>(null)
  const [currentMachineState, setCurrentMachineState] = useState<string>("")

  useEffect(() => {
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true"
    if (!isLoggedIn) {
      router.push("/login")
      return
    }

    loadUserInfo()
  }, [router])

  // Ïã§ÏãúÍ∞Ñ ÌÉÄÏù¥Î®∏ - 1Ï¥àÎßàÎã§ ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í∞êÏÜå
  useEffect(() => {
    if (remainingTime > 0) {
      const timer = setInterval(() => {
        setRemainingTime((prev) => {
          if (prev <= 1) {
            // ÏãúÍ∞ÑÏù¥ ÎÅùÎÇòÎ©¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Îã§Ïãú Î°úÎìú
            loadUserInfo()
            return 0
          }
          return prev - 1
        })
      }, 1000)

      return () => clearInterval(timer)
    }
  }, [remainingTime])

  // ÏÉàÎ°úÍ≥†Ïπ® Ïø®ÌÉÄÏûÑ ÌÉÄÏù¥Î®∏
  useEffect(() => {
    if (refreshCooldown > 0) {
      const timer = setTimeout(() => {
        setRefreshCooldown(refreshCooldown - 1)
      }, 1000)
      return () => clearTimeout(timer)
    }
  }, [refreshCooldown])

  // Í∏∞Í∏∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ (confirmed ÏÉÅÌÉúÏùº Îïå 20Ï¥àÎßàÎã§)
  const checkMachineStatus = useCallback(async () => {
    if (!userInfo?.reservationId || !userInfo?.machineLabel) return

    try {
      console.log("üîç Checking machine status...")
      const response = await machineApi.getDevices()

      if (response.success) {
        const { washer, dryer } = response.data
        const allMachines = [...washer, ...dryer]

        // ÌòÑÏû¨ ÏòàÏïΩÎêú Í∏∞Í∏∞ Ï∞æÍ∏∞
        const currentMachine = allMachines.find((machine) => machine.label === userInfo.machineLabel)

        if (currentMachine) {
          const machineType = userInfo.machineLabel?.toLowerCase().includes("dryer") ? "dryer" : "washer"
          const jobStateInfo = getMachineJobStateInfo(currentMachine, machineType)

          console.log(`üîß Machine ${currentMachine.label} status:`, {
            machineState: currentMachine.machineState,
            washerJobState: currentMachine.washerJobState,
            dryerJobState: currentMachine.dryerJobState,
            jobStateInfo: jobStateInfo.text,
            remainingTime: currentMachine.remainingTime,
          })

          // ÌòÑÏû¨ Í∏∞Í∏∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          setCurrentMachineState(jobStateInfo.text)

          // machineStateÍ∞Ä runÏù¥Î©¥ Ïã§Ï†ú ÏÑ∏ÌÉÅ/Í±¥Ï°∞ ÏãúÏûëÎê®
          if (currentMachine.machineState === "run") {
            console.log("‚úÖ Machine is now running! Updating user info...")

            // Í∏∞Í∏∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ï§ëÎã®
            if (machineCheckInterval) {
              clearInterval(machineCheckInterval)
              setMachineCheckInterval(null)
            }

            // remainingTimeÏù¥ ÏûàÏúºÎ©¥ ÌååÏã±Ìï¥ÏÑú Ï¥àÎ°ú Î≥ÄÌôò
            if (currentMachine.remainingTime && currentMachine.remainingTime !== "00:00:00") {
              const calculatedTime = parseTimeStringToSeconds(currentMachine.remainingTime)
              console.log(`‚è∞ Machine remaining time: ${currentMachine.remainingTime} -> ${calculatedTime} seconds`)
              setRemainingTime(calculatedTime)
            }

            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏó¨ running ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
            await loadUserInfo()

            const machineTypeName = userInfo.machineLabel?.toLowerCase().includes("dryer") ? "Í±¥Ï°∞Í∏∞" : "ÏÑ∏ÌÉÅÍ∏∞"
            toast({
              title: `${machineTypeName} ÏûëÎèô ÏãúÏûë`,
              description: `Í∏∞Í∏∞Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏûëÎèôÏùÑ ÏãúÏûëÌñàÏäµÎãàÎã§. (${jobStateInfo.text})`,
            })
          }
        } else {
          console.log(`‚ö†Ô∏è Machine ${userInfo.machineLabel} not found in response`)
        }
      }
    } catch (error) {
      console.error("‚ùå Failed to check machine status:", error)
    }
  }, [userInfo?.reservationId, userInfo?.machineLabel, machineCheckInterval])

  // confirmed ÏÉÅÌÉúÏùº Îïå Í∏∞Í∏∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ ÏãúÏûë
  useEffect(() => {
    if (userInfo?.status === "confirmed" && !machineCheckInterval) {
      console.log("üîÑ Starting machine status check (every 20 seconds)")
      const interval = setInterval(checkMachineStatus, 20000) // 20Ï¥àÎßàÎã§
      setMachineCheckInterval(interval)

      // Ï¶âÏãú Ìïú Î≤à Ï≤¥ÌÅ¨
      checkMachineStatus()
    } else if (userInfo?.status !== "confirmed" && machineCheckInterval) {
      console.log("‚èπÔ∏è Stopping machine status check")
      clearInterval(machineCheckInterval)
      setMachineCheckInterval(null)
    }

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    return () => {
      if (machineCheckInterval) {
        clearInterval(machineCheckInterval)
      }
    }
  }, [userInfo?.status, machineCheckInterval, checkMachineStatus])

  const loadUserInfo = async () => {
    try {
      setIsLoading(true)
      const response = await userApi.getMyInfo()

      if (response.success) {
        setUserInfo(response.data)
        console.log("üìã User info loaded:", response.data)

        // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ remainingTimeÏùÑ Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú ÏÇ¨Ïö©
        if (response.data.remainingTime && response.data.remainingTime !== "00:00:00") {
          // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ remainingTime ÌååÏã± (HH:MM:SS ÌòïÏãù)
          const parsedTime = parseTimeStringToSeconds(response.data.remainingTime)
          console.log(`‚è∞ Using server remainingTime: ${response.data.remainingTime} -> ${parsedTime} seconds`)
          setRemainingTime(parsedTime)
        } else if (response.data.remainingSeconds && response.data.remainingSeconds > 0) {
          // remainingSecondsÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
          console.log(`‚è∞ Using server remainingSeconds: ${response.data.remainingSeconds} seconds`)
          setRemainingTime(response.data.remainingSeconds)
        } else {
          // ÏÑúÎ≤ÑÏóêÏÑú ÏãúÍ∞Ñ Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ ÎïåÎßå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï∂îÏ†ï
          if (response.data.status === "waiting") {
            // ÎåÄÍ∏∞ Ï§ë: 5Î∂Ñ (300Ï¥à)
            console.log(`‚è∞ Using client fallback for waiting: 300 seconds`)
            setRemainingTime(300)
          } else if (response.data.status === "confirmed") {
            // ÌôïÏ†ïÎê®: 2Î∂Ñ (120Ï¥à) - ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÎåÄÍ∏∞ ÏãúÍ∞Ñ
            console.log(`‚è∞ Using client fallback for confirmed: 120 seconds`)
            setRemainingTime(120)
          } else {
            console.log(`‚è∞ No time information available, setting to 0`)
            setRemainingTime(0)
          }
        }
      }
    } catch (error: any) {
      console.error("Failed to load user info:", error)
      toast({
        title: "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®",
        description: error.message || "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleRefresh = async () => {
    if (refreshCooldown > 0) {
      toast({
        title: "ÏÉàÎ°úÍ≥†Ïπ® ÎåÄÍ∏∞",
        description: `${refreshCooldown}Ï¥à ÌõÑÏóê Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`,
        variant: "destructive",
      })
      return
    }

    setRefreshCooldown(5) // 5Ï¥à Ïø®ÌÉÄÏûÑ ÏÑ§Ï†ï
    await loadUserInfo()

    toast({
      title: "ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å",
      description: "ÏµúÏã† Ï†ïÎ≥¥Î°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.",
    })
  }

  const handleCancelReservation = async () => {
    if (!userInfo?.reservationId) return

    setActionLoading(true)
    try {
      console.log(`üóëÔ∏è Canceling reservation: ${userInfo.reservationId}`)
      const response = await reservationApi.deleteReservation(userInfo.reservationId)

      if (response.success) {
        // Í∏∞Í∏∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ï§ëÎã®
        if (machineCheckInterval) {
          clearInterval(machineCheckInterval)
          setMachineCheckInterval(null)
        }

        toast({
          title: "ÏòàÏïΩ Ï∑®ÏÜå ÏôÑÎ£å",
          description: "ÏòàÏïΩÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.",
        })
        await loadUserInfo() // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
      }
    } catch (error: any) {
      console.error("‚ùå Cancel reservation error:", error)
      toast({
        title: "ÏòàÏïΩ Ï∑®ÏÜå Ïã§Ìå®",
        description: error.message || "ÏòàÏïΩ Ï∑®ÏÜå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      })
    } finally {
      setActionLoading(false)
    }
  }

  const handleConfirmReservation = async () => {
    if (!userInfo?.reservationId) return

    setActionLoading(true)
    try {
      console.log(`‚úÖ Confirming reservation: ${userInfo.reservationId}`)
      const response = await reservationApi.confirmReservation(userInfo.reservationId)

      if (response.success) {
        const machineType = userInfo.machineLabel?.toLowerCase().includes("dryer") ? "Í±¥Ï°∞" : "ÏÑ∏ÌÉÅ"

        if (userInfo.status === "waiting") {
          toast({
            title: "ÏòàÏïΩ ÌôïÏ†ï ÏôÑÎ£å",
            description: `ÏòàÏïΩÏù¥ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§. ${machineType} ÏãúÏûë Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.`,
          })
        } else if (userInfo.status === "reserved") {
          toast({
            title: `${machineType} ÏãúÏûë`,
            description: `${machineType}Í∏∞Ïóê Ïó∞Í≤∞ Ï§ëÏûÖÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.`,
          })
        }

        await loadUserInfo() // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
      }
    } catch (error: any) {
      console.error("‚ùå Confirm reservation error:", error)
      toast({
        title: "ÏòàÏïΩ ÌôïÏ†ï Ïã§Ìå®",
        description: error.message || "ÏòàÏïΩ ÌôïÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      })
    } finally {
      setActionLoading(false)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "waiting":
        return (
          <Badge
            variant="secondary"
            className="bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
          >
            <Clock className="h-3 w-3 mr-1" />
            ÎåÄÍ∏∞ Ï§ë
          </Badge>
        )
      case "reserved":
        return (
          <Badge variant="default" className="bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
            <CheckCircle className="h-3 w-3 mr-1" />
            ÏòàÏïΩÎê®
          </Badge>
        )
      case "confirmed":
        return (
          <Badge variant="default" className="bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400">
            <Loader2 className="h-3 w-3 mr-1 animate-spin" />
            Ïó∞Í≤∞ Ï§ë
          </Badge>
        )
      case "running":
        return (
          <Badge variant="default" className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400">
            <Play className="h-3 w-3 mr-1" />
            ÏÇ¨Ïö© Ï§ë
          </Badge>
        )
      default:
        return <Badge variant="outline">Ïïå Ïàò ÏóÜÏùå</Badge>
    }
  }

  const getStatusDescription = (status: string) => {
    switch (status) {
      case "waiting":
        return "ÏòàÏïΩÏù¥ ÎåÄÍ∏∞ Ï§ëÏûÖÎãàÎã§. 5Î∂Ñ Ïù¥ÎÇ¥Ïóê ÌôïÏ†ïÌï¥Ï£ºÏÑ∏Ïöî."
      case "reserved":
        return "ÏòàÏïΩÏù¥ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§. ÏÑ∏ÌÉÅ/Í±¥Ï°∞Î•º ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî."
      case "confirmed":
        return "Í∏∞Í∏∞Ïóê Ïó∞Í≤∞ Ï§ëÏûÖÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî."
      case "running":
        return "ÌòÑÏû¨ ÏÑ∏ÌÉÅ/Í±¥Ï°∞Í∞Ä ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§."
      default:
        return ""
    }
  }

  const getRemainingTimeLabel = (status: string) => {
    switch (status) {
      case "waiting":
        return "ÌôïÏ†ïÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ"
      case "confirmed":
        return "Ïó∞Í≤∞ÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ"
      case "running":
        return "ÏôÑÎ£åÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ"
      default:
        return "ÎÇ®ÏùÄ ÏãúÍ∞Ñ"
    }
  }

  const isRestricted = userInfo?.restrictedUntil && new Date(userInfo.restrictedUntil) > new Date()

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#86A9FF] mx-auto mb-2"></div>
          <p className="text-gray-500">ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    )
  }

  if (!userInfo) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-red-600">Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®</CardTitle>
            <CardDescription>ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <Button onClick={() => router.push("/")} className="bg-[#86A9FF] hover:bg-[#6487DB]">
              ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4 max-w-2xl">
      <div className="space-y-6">
        {/* Ìó§Îçî */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-[#6487DB] dark:text-[#86A9FF] mb-2">ÎßàÏù¥ÌéòÏù¥ÏßÄ</h1>
            <p className="text-gray-600">ÎÇ¥ Ï†ïÎ≥¥ÏôÄ ÏòàÏïΩ ÌòÑÌô©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={handleRefresh}
            disabled={refreshCooldown > 0}
            className="border-[#86A9FF] text-[#6487DB] hover:bg-[#EDF2FF] dark:border-[#6487DB] dark:text-[#86A9FF] dark:hover:bg-gray-700"
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${refreshCooldown > 0 ? "animate-spin" : ""}`} />
            {refreshCooldown > 0 ? `ÏÉàÎ°úÍ≥†Ïπ® (${refreshCooldown}Ï¥à)` : "ÏÉàÎ°úÍ≥†Ïπ®"}
          </Button>
        </div>

        {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ïπ¥Îìú */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-gray-500" />
                  <span className="text-sm text-gray-500">Ïù¥Î¶Ñ</span>
                </div>
                <p className="font-medium">{userInfo.name}</p>
              </div>

              {userInfo.schoolNumber && (
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4 text-gray-500" />
                    <span className="text-sm text-gray-500">ÌïôÎ≤à</span>
                  </div>
                  <p className="font-medium">{userInfo.schoolNumber}</p>
                </div>
              )}

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <MapPin className="h-4 w-4 text-gray-500" />
                  <span className="text-sm text-gray-500">Ìò∏Ïã§</span>
                </div>
                <p className="font-medium">{userInfo.roomNumber}Ìò∏</p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-gray-500" />
                  <span className="text-sm text-gray-500">ÏÑ±Î≥Ñ</span>
                </div>
                <p className="font-medium">{userInfo.gender === "male" ? "ÎÇ®ÏÑ±" : "Ïó¨ÏÑ±"}</p>
              </div>
            </div>

            {/* Ï†úÏû¨ Ï†ïÎ≥¥ */}
            {isRestricted && (
              <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg dark:bg-red-900/20 dark:border-red-800">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="h-5 w-5 text-red-600" />
                  <span className="font-medium text-red-800 dark:text-red-400">ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú</span>
                </div>
                <p className="text-sm text-red-700 dark:text-red-400 mb-1">
                  Ï†úÌïú Ìï¥Ï†ú: {new Date(userInfo.restrictedUntil!).toLocaleString()}
                </p>
                {userInfo.restrictionReason && (
                  <p className="text-sm text-red-700 dark:text-red-400">ÏÇ¨Ïú†: {userInfo.restrictionReason}</p>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        {/* ÏòàÏïΩ Ï†ïÎ≥¥ Ïπ¥Îìú */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              ÏòàÏïΩ ÌòÑÌô©
            </CardTitle>
          </CardHeader>
          <CardContent>
            {userInfo.reservationId ? (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-lg">{userInfo.machineLabel}</p>
                    <p className="text-sm text-gray-500">
                      ÏòàÏïΩ ÏãúÏûë: {userInfo.startTime ? new Date(userInfo.startTime).toLocaleString() : "Ï†ïÎ≥¥ ÏóÜÏùå"}
                    </p>
                  </div>
                  {userInfo.status && getStatusBadge(userInfo.status)}
                </div>

                {/* ÏÉÅÌÉú ÏÑ§Î™Ö */}
                {userInfo.status && getStatusDescription(userInfo.status) && (
                  <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-900/20 dark:border-blue-800">
                    <p className="text-sm text-blue-700 dark:text-blue-400">{getStatusDescription(userInfo.status)}</p>
                  </div>
                )}

                {/* Í∏∞Í∏∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ï§ë ÌëúÏãú */}
                {userInfo.status === "confirmed" && (
                  <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg dark:bg-orange-900/20 dark:border-orange-800">
                    <div className="flex items-center gap-2 mb-2">
                      <Loader2 className="h-4 w-4 text-orange-600 animate-spin" />
                      <span className="text-sm text-orange-700 dark:text-orange-400">
                        Í∏∞Í∏∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÍ≥† ÏûàÏäµÎãàÎã§... (20Ï¥àÎßàÎã§ ÏûêÎèô ÌôïÏù∏)
                      </span>
                    </div>
                    {currentMachineState && (
                      <p className="text-xs text-orange-600 dark:text-orange-300">
                        ÌòÑÏû¨ Í∏∞Í∏∞ ÏÉÅÌÉú: {currentMachineState}
                      </p>
                    )}
                  </div>
                )}

                {remainingTime > 0 && (
                  <div
                    className={`p-4 rounded-lg border ${
                      userInfo.status === "running"
                        ? "bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800"
                        : "bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800"
                    }`}
                  >
                    <div className="flex items-center gap-2 mb-2">
                      <Clock
                        className={`h-5 w-5 ${userInfo.status === "running" ? "text-green-600" : "text-blue-600"}`}
                      />
                      <span
                        className={`font-medium ${
                          userInfo.status === "running"
                            ? "text-green-800 dark:text-green-400"
                            : "text-blue-800 dark:text-blue-400"
                        }`}
                      >
                        {getRemainingTimeLabel(userInfo.status || "")}
                      </span>
                    </div>
                    <p
                      className={`text-2xl font-bold ${
                        userInfo.status === "running"
                          ? "text-green-600 dark:text-green-400"
                          : "text-blue-600 dark:text-blue-400"
                      }`}
                    >
                      {formatTime(remainingTime)}
                    </p>
                  </div>
                )}

                <Separator />

                <div className="flex gap-2">
                  {/* ÎåÄÍ∏∞ Ï§ëÏùº Îïå: ÏòàÏïΩ ÌôïÏ†ï Î≤ÑÌäº */}
                  {userInfo.status === "waiting" && (
                    <Button
                      onClick={handleConfirmReservation}
                      disabled={actionLoading}
                      className="flex-1 bg-green-600 hover:bg-green-700"
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      {actionLoading ? "Ï≤òÎ¶¨ Ï§ë..." : "ÏòàÏïΩ ÌôïÏ†ï"}
                    </Button>
                  )}

                  {/* ÏòàÏïΩÎê® ÏÉÅÌÉúÏùº Îïå: ÏÑ∏ÌÉÅ/Í±¥Ï°∞ ÏãúÏûë Î≤ÑÌäº */}
                  {userInfo.status === "reserved" && (
                    <Button
                      onClick={handleConfirmReservation}
                      disabled={actionLoading}
                      className="flex-1 bg-[#86A9FF] hover:bg-[#6487DB]"
                    >
                      <Play className="h-4 w-4 mr-2" />
                      {actionLoading
                        ? "Ï≤òÎ¶¨ Ï§ë..."
                        : userInfo.machineLabel?.toLowerCase().includes("dryer")
                          ? "Í±¥Ï°∞ ÏãúÏûë"
                          : "ÏÑ∏ÌÉÅ ÏãúÏûë"}
                    </Button>
                  )}

                  {/* Ï∑®ÏÜå Î≤ÑÌäº - waiting, reserved, confirmed ÏÉÅÌÉúÏóêÏÑúÎßå ÌëúÏãú */}
                  {["waiting", "reserved", "confirmed"].includes(userInfo.status || "") && (
                    <Button
                      variant="destructive"
                      onClick={handleCancelReservation}
                      disabled={actionLoading}
                      className="flex-1"
                    >
                      <XCircle className="h-4 w-4 mr-2" />
                      {actionLoading ? "Ï∑®ÏÜå Ï§ë..." : "ÏòàÏïΩ Ï∑®ÏÜå"}
                    </Button>
                  )}
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <Calendar className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                <p className="text-gray-500 mb-4">ÌòÑÏû¨ ÏòàÏïΩÏù¥ ÏóÜÏäµÎãàÎã§</p>
                <Button onClick={() => router.push("/")} className="bg-[#86A9FF] hover:bg-[#6487DB]">
                  ÏòàÏïΩÌïòÎü¨ Í∞ÄÍ∏∞
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Ïï°ÏÖò Î≤ÑÌäº */}
        <div className="flex gap-4">
          <Button variant="outline" onClick={() => router.push("/")} className="flex-1">
            ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          </Button>
        </div>
      </div>
    </div>
  )
}
